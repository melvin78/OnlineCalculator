@using OnlineCalculator.Extensions
@using System.Globalization
@using System.Text.RegularExpressions
@using OnlineCalculator.Model
@implements IDisposable
@inject CalculatorScreenValueContainer CalculatorScreenValueContainer
@inject CalculationAnswerContainer CalculationAnswerContainer
@inject CalculationDoneBeforeContainer CalculationDoneBeforeContainer
@inject ScreenValueToBeCalculatedContainer ScreenValueToBeCalculatedContainer
@inject CalculationHistoryContainer CalculationHistoryContainer
@inject CalculationExpressionCounterContainer CalculationExpressionCounterContainer

<div class="w-1/4 border-r border-b border-indigo-400">
    <button  @onclick="() => ChangeScreenValue(Content)" class="w-full h-16 outline-none focus:outline-none hover:bg-indigo-700 hover:bg-opacity-20 text-white text-xl font-light">@Content</button>
</div>

@code {
    
    [Parameter]
    public string? Content { get; set; }
    
    protected override void OnInitialized()
    {
        CalculatorScreenValueContainer.OnChange += StateHasChanged;
        CalculationAnswerContainer.OnChange += StateHasChanged;
        CalculationDoneBeforeContainer.OnChange += StateHasChanged;
        CalculationHistoryContainer.OnAddNewItem += StateHasChanged;
    }

    private void ChangeScreenValue(string content)
    {
        
        CalculatorScreenValueContainer.Property += content;

        ScreenValueToBeCalculatedContainer.Property = content;
        
        
        if (string.IsNullOrEmpty(CalculationAnswerContainer.Property) && !CalculationDoneBeforeContainer.Property)
        {

            var response = CalculatorScreenValueContainer.Property.GetAnswer();

            if (response.Value is null) 
                return;
            
            CalculationAnswerContainer.Property = response.Value.ToString();
            
            CalculationHistoryContainer.Property.Add((decimal)response.Value);
                
        }
        else
        {



            var response = CalculatorScreenValueContainer.Property.GetSuccessiveAnswers(decimal.Parse(CalculationAnswerContainer.Property), CalculationHistoryContainer.Property, CalculationExpressionCounterContainer.Property);

            switch (response.ValidExpression)
            {
                case true when response.Value is not null && response.UpdateCalculationHistory:
                
                    // CalculationExpressionCounterContainer.Property += 1;

                
                    CalculationHistoryContainer.Property.Add((decimal)response.Value);
                    break;
                    
                    
                case false when response.UpdateCalculationHistory && response.Value is not null:
                    
                    CalculationHistoryContainer.Property.Add((decimal)response.Value);
                    // CalculationExpressionCounterContainer.Property += 1;

                    break;
            }


            CalculationAnswerContainer.Property = response.Value.ToString();
        }
        
    }

    public void Dispose()
    {
        CalculatorScreenValueContainer.OnChange -= StateHasChanged;
        CalculationAnswerContainer.OnChange -= StateHasChanged;
        CalculationDoneBeforeContainer.OnChange -= StateHasChanged;
        CalculationHistoryContainer.OnAddNewItem -= StateHasChanged;

        
    }
}